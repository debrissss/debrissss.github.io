{"meta":{"title":"LYM的学习空间","subtitle":"","description":"算法和数据结构","author":"LYM","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2021-11-15T14:32:23.147Z","updated":"2021-11-15T14:32:23.147Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-11-09T12:57:17.977Z","updated":"2021-11-09T12:57:17.977Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Hi，欢迎来到我的学习空间。留言/催更: &#x74;&#x65;&#x6e;&#99;&#x62;&#x6e;&#122;&#111;&#x63;&#103;&#x6d;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;"}],"posts":[{"title":"邻接表","slug":"邻接表","date":"2021-11-19T04:36:33.000Z","updated":"2021-11-21T08:53:25.458Z","comments":true,"path":"2021/11/19/邻接表/","link":"","permalink":"http://example.com/2021/11/19/%E9%82%BB%E6%8E%A5%E8%A1%A8/","excerpt":"","text":"邻接表的存储结构邻接表是图的一种链式存储结构，由顶点结点、边界点和储存单链表的数组构成。在邻接表中，单链表由图中每一个顶点和与其相邻接的多个顶点构成，其中头结点为顶点结点，其余结点为边结点；所有的头结点储存在数组中，数组长度为图的顶点个数。 邻接表定义123456789101112131415161718#define VertexType char#define InFo int#define MAX_VERTEX_NUM 20//图的最大顶点数typedef struct ArcNode//边结点&#123; int adjvex; //该条边对应顶点的数组下标 struct ArcNode *nextarc; //指向下一条弧的指针&#125;ArcNode;typedef struct VNode//顶点结点&#123; VertexType data;//顶点信息 ArcNode *firstarc;//指向第一条依附该顶点的边的指针，即单链表中的第一条边&#125;VNode,AdjList[MAX_VERTEX_NUM];//顶点数组typedef struct &#123; AdjList vertices;//顶点数组 int vexnum,arcnum;//图的顶点数和边数&#125;Graph,*GraphAdjList; 结合上述定义可知，邻接表中的单链表的具体结构为：VNode-&gt;ArcNode-&gt;ArcNode…-&gt;ArcNode-&gt;NULL 举例说明图的样式如下：（为了方便起见，顶点信息与顶点下标保持一致）通过该图，可以得到的邻接表如下：（单链表中结点顺序不唯一，与构建是输入边的顺序有关） 邻接表构建尾插法构建邻接表（适合有向图）1234567891011121314151617181920212223242526272829303132void CreateGA(GraphAdjList &amp;G)&#123; cout&lt;&lt;&quot;输入顶点数和边数&quot;&lt;&lt;endl; cin&gt;&gt;G-&gt;vexnum&gt;&gt;G-&gt;arcnum; cout&lt;&lt;&quot;输入顶点信息&quot;&lt;&lt;endl; for(int i=0;i&lt;G-&gt;vexnum;++i) &#123; cin&gt;&gt;G-&gt;vertices[i].data; G-&gt;vertices[i].firstarc=NULL; &#125; for(int j=0;j&lt;G-&gt;arcnum;++j) &#123; int m,n; ArcNode *p,*q; cout&lt;&lt;&quot;输入边对应的两个顶点的序号&quot;&lt;&lt;endl; cin&gt;&gt;m&gt;&gt;n; p=(ArcNode*)malloc(sizeof(ArcNode));//在内存中申请空间，生成边结点 p-&gt;adjvex=n;//在边中存入其所连接的顶点信息 p-&gt;nextarc=NULL; if(G-&gt;vertices[m].firstarc==NULL)//判定该条边是第一条依附于顶点的边 &#123; G-&gt;vertices[m].firstarc=p;//头结点与边结点连接 q=p;//保存单链表最后一个结点的信息 &#125; else &#123; q-&gt;nextarc=p;//保存单链表最后一个结点的信息 q=q-&gt;nextarc;//边结点与边结点连接 &#125; //在这里一次生成边结点，即建立有向图中两个顶点的单向关系 &#125;&#125; 头插法构建邻接表（适合无向图）123456789101112131415161718192021222324252627void CreateGA(GraphAdjList &amp;G)&#123; cout&lt;&lt;&quot;输入顶点数和边数&quot;&lt;&lt;endl; cin&gt;&gt;G-&gt;vexnum&gt;&gt;G-&gt;arcnum; cout&lt;&lt;&quot;输入顶点信息&quot;&lt;&lt;endl; for(int i=0;i&lt;G-&gt;vexnum;++i) &#123; cin&gt;&gt;G-&gt;vertices[i].data; G-&gt;vertices[i].firstarc=NULL; &#125; for(int j=0;j&lt;G-&gt;arcnum;++j) &#123; int m,n; ArcNode *p; cout&lt;&lt;&quot;输入弧对应的两个顶点的序号&quot;&lt;&lt;endl; cin&gt;&gt;m&gt;&gt;n; p=(ArcNode*)malloc(sizeof(ArcNode));//在内存中申请空间，生成边结点 p-&gt;adjvex=n;//在边中存入其所连接的顶点信息 p-&gt;nextarc=G-&gt;vertices[m].firstarc; G-&gt;vertices[m].firstarc=p;//头结点与边结点连接 p=(ArcNode*)malloc(sizeof(ArcNode));//在内存中申请空间，生成边结点 p-&gt;adjvex=m;//在边中存入其所连接的顶点信息 p-&gt;nextarc=G-&gt;vertices[n].firstarc; G-&gt;vertices[n].firstarc=p;//头结点与边结点连接 //在这里两次生成边结点，即建立无向图中两个顶点的双向关系 &#125;&#125; 邻接表遍历遍历是对图中的结点进行一次访问，所以使用visit[]数组来记录结点是否被访问过，该数组在深度遍历和广度遍历中都会用到。 深度优先遍历1.首先访问起始顶点，并标记为已访问2.用递归的方式访问起始顶点的一个邻接顶点，并将访问过的顶点做好标记，继续访问该邻接顶点的邻接顶点，可以看作是沿着图的路径访问顶点3.直到这条路径上所有的邻接顶点都被访问过以后，返回起始顶点继续访问起始顶点的下一个邻接顶点，重复步骤2，直至所有顶点都被访问过代码如下： 123456789101112131415161718192021void DFS(GraphAdjList &amp;G,int i)&#123; cout&lt;&lt;G-&gt;vertices[i].data&lt;&lt;&quot; &quot;;//访问起始顶点 visit[i]=TRUE; ArcNode*e; e=G-&gt;vertices[i].firstarc;//访问起始顶点的第一个邻接顶点 while(e) &#123; if(!visit[e-&gt;adjvex]) DFS(G,e-&gt;adjvex); e=e-&gt;nextarc;//访问起始顶点的下一个邻接顶点 &#125;&#125;void DFSTraverse(GraphAdjList &amp;G)&#123; for(int i=0;i&lt;G-&gt;vexnum;++i)//初始化visit[]数组 visit[i]=FALSE; for(int i=0;i&lt;G-&gt;vexnum;++i)//访问图中的顶点 if(!visit[i]) DFS(G,i);&#125; 广度优先遍历1.首先访问起始顶点，并标记为已访问2.访问起始顶点的全部邻接顶点，并将访问过的顶点做好标记，然后依次访问每个邻接顶点的全部邻接顶点，可以看作是以起始顶点为中心，按层访问图的顶点3.重复步骤2，直至所有顶点都被访问过为了实现对顶点的分层访问，需要利用到队列先进先出的特性，所以这里引入一些队列基本操作的代码 1234567891011121314151617181920212223242526272829303132typedef struct&#123; QElemType* base;//初始化的动态分配存储空间 int front;//头指针，若队列不空，则指向头元素 int rear;//尾指针，若队列不空，则指向尾元素的下一个位置&#125;SqQueue;Status InitQueue(SqQueue&amp; Q)//构造一个空队列&#123; Q.base = (QElemType*)malloc(MAXQSIZE * sizeof(QElemType)); if (!Q.base) exit(OVERFLOW);//分配空间失败 Q.front = Q.rear = 0; return OK;&#125;Status QueueEmpty(SqQueue Q)//队列判空&#123; return (Q.front == Q.rear);&#125;Status EnQueue(SqQueue&amp; Q, QElemType e)//插入元素e成为新的队尾元素&#123; if ((Q.rear + 1) % MAXQSIZE == Q.front)return ERROR; Q.base[Q.rear] = e; Q.rear = (Q.rear + 1) % MAXQSIZE; return OK;&#125;Status DeQueue(SqQueue&amp; Q)//删除队列的队头元素，用e返回其值&#123; QElemType e; if (Q.front == Q.rear) return ERROR; e = Q.base[Q.front]; Q.front = (Q.front + 1) % MAXQSIZE; return e;&#125; 代码如下: 12345678910111213141516171819202122232425262728293031void BFSTraverse(GraphAdjList &amp;G)&#123; SqQueue Q; InitQueue(Q); for(int i=0;i&lt;G-&gt;vexnum;++i) visit[i]=FALSE;//初始化visit[]数组 for(int i=0;i&lt;G-&gt;vexnum;++i) &#123; if(!visit[i]) &#123; cout&lt;&lt;G-&gt;vertices[i].data&lt;&lt;&quot; &quot;;//访问起始顶点 visit[i]=TRUE; EnQueue(Q,i);//访问过的顶点进入队列 while(!QueueEmpty(Q)) &#123; int t=DeQueue(Q);//获取队头元素并将队头元素删除 ArcNode *p=G-&gt;vertices[i].firstarc;//获取起始顶点的邻接顶点 while(p) &#123; if(!visit[p-&gt;adjvex]) &#123; cout&lt;&lt;G-&gt;vertices[p-&gt;adjvex].data&lt;&lt;&quot; &quot;;//访问起始顶点的邻接顶点 visit[p-&gt;adjvex]=TRUE; EnQueue(Q,p-&gt;adjvex);//访问过的顶点进入队列 &#125; p=p-&gt;nextarc;//获取邻接顶点的下一个邻接顶点 &#125; &#125; &#125; &#125;&#125; 完整代码及演示（以上面的无向图为例）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include&lt;iostream&gt;using namespace std;#define TRUE 1#define FALSE 0#define OK 1#define ERROR 0#define INFEASIBLE -1#define OVERFLOW -2#define ElemType int#define Status int#define MAX_VERTEX_NUM 20#define MAXQSIZE 100bool visit[MAX_VERTEX_NUM];typedef struct ArcNode&#123; int adjvex; struct ArcNode *nextarc; &#125;ArcNode;typedef struct VNode&#123; char data; ArcNode *firstarc;&#125;VNode,AdjList[MAX_VERTEX_NUM];typedef struct &#123; AdjList vertices; int vexnum,arcnum;&#125;Graph,*GraphAdjList;typedef struct&#123; ElemType* base; int front; int rear;&#125;SqQueue;Status InitQueue(SqQueue&amp; Q)//构造一个空队列&#123; Q.base = (ElemType*)malloc(MAXQSIZE * sizeof(ElemType)); if (!Q.base) exit(OVERFLOW); Q.front = Q.rear = 0; return OK;&#125;Status QueueEmpty(SqQueue Q)//队列判空&#123; return (Q.front == Q.rear);&#125;Status EnQueue(SqQueue&amp; Q, ElemType e)//插入元素e成为新的队尾元素&#123; if ((Q.rear + 1) % MAXQSIZE == Q.front)return ERROR; Q.base[Q.rear] = e; Q.rear = (Q.rear + 1) % MAXQSIZE; return OK;&#125;Status DeQueue(SqQueue&amp; Q)//删除队列的队头元素，用e返回其值&#123; ElemType e; if (Q.front == Q.rear) return ERROR; e = Q.base[Q.front]; Q.front = (Q.front + 1) % MAXQSIZE; return e;&#125;void CreateGA(GraphAdjList &amp;G)//创建邻接表&#123; cout&lt;&lt;&quot;输入顶点数和边数&quot;&lt;&lt;endl; cin&gt;&gt;G-&gt;vexnum&gt;&gt;G-&gt;arcnum; cout&lt;&lt;&quot;输入顶点信息&quot;&lt;&lt;endl; for(int i=0;i&lt;G-&gt;vexnum;++i) &#123; cin&gt;&gt;G-&gt;vertices[i].data; G-&gt;vertices[i].firstarc=NULL; &#125; cout&lt;&lt;&quot;输入边对应的两个顶点的序号&quot;&lt;&lt;endl; for(int j=0;j&lt;G-&gt;arcnum;++j) &#123; int m,n; ArcNode *p; cin&gt;&gt;m&gt;&gt;n; p=(ArcNode*)malloc(sizeof(ArcNode)); p-&gt;adjvex=n; p-&gt;nextarc=G-&gt;vertices[m].firstarc; G-&gt;vertices[m].firstarc=p; p=(ArcNode*)malloc(sizeof(ArcNode)); p-&gt;adjvex=m; p-&gt;nextarc=G-&gt;vertices[n].firstarc; G-&gt;vertices[n].firstarc=p; &#125;&#125;void print(GraphAdjList &amp;G)//输出邻接表&#123; ArcNode *e; for(int i=0;i&lt;G-&gt;vexnum;++i) &#123; e=G-&gt;vertices[i].firstarc; cout&lt;&lt;&quot;顶点序号：&quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;&quot;邻接点序号：&quot;; while(e) &#123; cout&lt;&lt;e-&gt;adjvex&lt;&lt;&quot; &quot;; e=e-&gt;nextarc; &#125; cout&lt;&lt;endl; &#125;&#125;void DFS(GraphAdjList &amp;G,int i)//深度优先搜索&#123; cout&lt;&lt;G-&gt;vertices[i].data&lt;&lt;&quot; &quot;; visit[i]=TRUE; ArcNode*e; e=G-&gt;vertices[i].firstarc; while(e) &#123; if(!visit[e-&gt;adjvex]) DFS(G,e-&gt;adjvex); e=e-&gt;nextarc; &#125;&#125;void DFSTraverse(GraphAdjList &amp;G)//深度优先遍历&#123; for(int i=0;i&lt;G-&gt;vexnum;++i) visit[i]=FALSE; for(int i=0;i&lt;G-&gt;vexnum;++i) if(!visit[i]) DFS(G,i);&#125;void BFSTraverse(GraphAdjList &amp;G)//广度优先遍历&#123; SqQueue Q; InitQueue(Q); for(int i=0;i&lt;G-&gt;vexnum;++i) visit[i]=FALSE; for(int i=0;i&lt;G-&gt;vexnum;++i) &#123; if(!visit[i]) &#123; cout&lt;&lt;G-&gt;vertices[i].data&lt;&lt;&quot; &quot;; visit[i]=TRUE; EnQueue(Q,i); while(!QueueEmpty(Q)) &#123; int t=DeQueue(Q); ArcNode *p=G-&gt;vertices[i].firstarc; while(p) &#123; if(!visit[p-&gt;adjvex]) &#123; cout&lt;&lt;G-&gt;vertices[p-&gt;adjvex].data&lt;&lt;&quot; &quot;; visit[p-&gt;adjvex]=TRUE; EnQueue(Q,p-&gt;adjvex); &#125; p=p-&gt;nextarc; &#125; &#125; &#125; &#125;&#125;int main()&#123; GraphAdjList G; G = (GraphAdjList)malloc(sizeof(Graph)); CreateGA(G); cout&lt;&lt;&quot;邻接表：&quot;&lt;&lt;endl; print(G); cout&lt;&lt;&quot;深度优先遍历：&quot;&lt;&lt;endl; DFSTraverse(G); cout&lt;&lt;endl; cout&lt;&lt;&quot;广度优先遍历：&quot;&lt;&lt;endl; BFSTraverse(G); cout&lt;&lt;endl;&#125; 演示结果：","categories":[],"tags":[]},{"title":"单链表","slug":"数据结构/单链表","date":"2021-11-14T07:16:35.000Z","updated":"2021-11-17T08:45:27.924Z","comments":true,"path":"2021/11/14/数据结构/单链表/","link":"","permalink":"http://example.com/2021/11/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/","excerpt":"","text":"单链表的基本操作前言本篇文章将围绕单链表展开介绍，首先展示单链表各种操作的代码实现，然后介绍单链表相关的一些算法。 头文件和一些定义12345678910#include&lt;iostream&gt;using namespace std;#define TRUE 1#define FALSE 0#define OK 1#define ERROR 0#define INFEASIBLE -1#define OVERFLOW -2#define ElemType int#define Status int 定义单链表结构体12345typedef struct LinkNode//定义链表结点的结构体类型&#123; ElemType data;//结点的数据域 LinkNode* next;//结点的指针域&#125;*LinkList; 基本操作初始化1234567Status InitList(LinkList&amp; L)//初始化链表&#123; L = (LinkList)malloc(sizeof(LinkNode)); if (!L) exit(OVERFLOW); L-&gt;next = NULL; return OK;&#125; 判空1234Status ListEmpty(LinkList L)//判断链表是否为空表&#123; return (L-&gt;next == NULL);&#125; 插入1234567891011121314151617Status ListInsert(LinkList&amp; L, int i, ElemType e)//在链表中第i个位置插入元素e&#123; LinkList p = L; int j = 0; while (j &lt; i - 1 &amp;&amp; p)//在第i个位置插入，则寻找第i-1个结点 &#123; ++j; p=p-&gt;next; &#125; if (!p || j &gt; i)//!p-&gt;next对应插入位置大于链表长度加1，j&gt;i对应插入位置&lt;=0 return ERROR; LinkList q=(LinkList)malloc(sizeof(LinkNode)); q-&gt;data = e; q-&gt;next = p-&gt;next; p-&gt;next = q; return OK;&#125; 删除123456789101112131415Status ListDelete(LinkList&amp; L, int i, ElemType&amp; e)//删除链表中第i个结点，并用e带回删除结点的元素值&#123; LinkList p = L; int j = 0; while (j &lt; i - 1 &amp;&amp; p-&gt;next)//删除第i个元素，则寻找第i-1个结点 &#123; ++j; p = p-&gt;next; &#125; if (!p-&gt;next || j &gt; i)//!p-&gt;next对应删除位置大于链表加1，j&gt;i对应插入位置&lt;=0 return ERROR; e = p-&gt;next-&gt;data; p-&gt;next = p-&gt;next-&gt;next; return OK;&#125; 清空1234567891011Status ClearList(LinkList&amp; L)//清空链表&#123; LinkList p; while (L-&gt;next) &#123; p = L-&gt;next; L-&gt;next = p-&gt;next; free(p); &#125; return OK;&#125; 销毁123456789101112Status DestroyList(LinkList&amp; L)//销毁链表&#123; LinkList p; &#123; p = L-&gt;next; L-&gt;next = p-&gt;next; free(p); &#125; free(L); L = NULL; return OK;&#125; 求长1234567891011int ListLength(LinkList L)//求链表长度，即链表中结点个数&#123; LinkList p = L; int count = 0; while (p-&gt;next) &#123; p = p-&gt;next; ++count; &#125; return count;&#125; 取值1234567891011121314Status GetElem(LinkList L, int i, ElemType&amp; e)//获取第i个结点的元素值，并由e带回&#123; LinkList p = L-&gt;next; int j = 1; while (j != i &amp;&amp; p) &#123; ++j; p = p-&gt;next; &#125; if (!p || j &gt; i) return ERROR; e = p-&gt;data; return OK;&#125; 定位123456789101112int LocalElem(LinkList L, ElemType e, bool compare(ElemType,ElemType))//获取元素e在链表中的位序&#123; LinkList p = L-&gt;next; int i=1; while (p) &#123; if(compare(p-&gt;data, e)) return i; p = p-&gt;next; ++i; &#125; return 0;&#125; 求前驱12345678910Status PriorElem(LinkList L, ElemType cur_e, ElemType&amp; pre_e)//求元素cur_e在链表中的前驱，由pre_e带回&#123; LinkList p = L-&gt;next; while (p-&gt;next &amp;&amp; cur_e != p-&gt;next-&gt;data) p = p-&gt;next; if (!p-&gt;next) return ERROR; pre_e = p-&gt;data; return OK;&#125; 求后继12345678910Status NextElem(LinkList L, ElemType cur_e, ElemType&amp; next_e)//求元素cur_e在链表中的后继，由nexe_e带回&#123; LinkList p = L-&gt;next; while (p-&gt;next &amp;&amp; cur_e != p -&gt;data) p = p-&gt;next; if (!p-&gt;next) return ERROR; next_e = p-&gt;next-&gt;data; return OK;&#125; 遍历12345678910111213Status ListTraverse(LinkList L, void vi(ElemType e))//遍历链表&#123; LinkList p = L-&gt;next; while (p) &#123; vi(p-&gt;data); if (!p-&gt;next) cout &lt;&lt; &quot; &quot;; p=p-&gt;next; &#125; cout &lt;&lt; endl; return OK;&#125; 辅助函数12345678bool compare(ElemType e1, ElemType e2)//比较函数&#123; return (e1 == e2);&#125;void vi(ElemType e)//cout函数&#123; cout &lt;&lt; e;&#125; 合并两个有序单链表假设L1和L2为两个链表，并且链表中的元素按照升序排列，现在要求将链表L1与L2合并到L3中，并且合并后的元素依然按照升序排列。要解决这个问题，可以利用双指针的思路，用两个指针分别指向两个链表中的第一个元素，然后进行大小比较，将较小的一个插入L3中，然后指针后移，直至指针指向空为止。这个操作可以用while循环来实现上述内容可以用while循环来实现,假设p1指向L1的第一个元素，p2指向L2的第一个元素，代码如下： 123456789101112131415while(p1&amp;&amp;p2) &#123; if(p1-&gt;data&lt;p2-&gt;data) &#123; p3-&gt;next=p1; p3=p1; p1=p1-&gt;next; &#125; else &#123; p3-&gt;next=p2; p3=p2; p2=p2-&gt;next; &#125; &#125; 1234567891011121314151617181920212223242526272829303132333435LinkList Combine(LinkList L1,LinkList L2)&#123; LinkList L3; InitList(L3); LinkList p1=L1-&gt;next,p2=L2-&gt;next,p3=L3; while(p1&amp;&amp;p2) &#123; if(p1-&gt;data&lt;p2-&gt;data) &#123; p3-&gt;next=p1; p3=p1; p1=p1-&gt;next; &#125; else &#123; p3-&gt;next=p2; p3=p2; p2=p2-&gt;next; &#125; &#125; if(p1) p3-&gt;next=p1; if(p2) p3-&gt;next=p2; return L3;&#125;void Link(LinkList L1,LinkList L2)&#123; LinkList q=(LinkList)malloc(sizeof(LinkNode)); q-&gt;data = L1-&gt;data; q-&gt;next = L2-&gt;next; L2-&gt;next = q; L2 = q; L1=L1-&gt;next;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"-单链表","slug":"单链表","permalink":"http://example.com/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"}],"author":"LYM"},{"title":"致来访者","slug":"hello-world","date":"2021-11-08T09:03:18.951Z","updated":"2021-11-15T14:32:54.829Z","comments":true,"path":"2021/11/08/hello-world/","link":"","permalink":"http://example.com/2021/11/08/hello-world/","excerpt":"","text":"欢迎来到我的个人博客！！！ 博客的由来一方面希望把自己在求学阶段的学习过程与心得体会记录下来，另一方面我自己也从很多优秀的博客文章中获益匪浅，因此就萌生了建立个人博客的想法。 未来的构想初次拥有了自己的个人博客，心情是非常激动的，希望自己能坚持写下去。我的目标是本科期间打造一个较为完备的代码学习笔记，努力去产出有价值的内容。从目前来看，内容上将有很长一段时间集中在算法与数据结构方面，其他方面的知识还没有涉猎，留待日后慢慢开拓。 最后我也仍在学习的过程当中，所以内容上可能会有疏漏和错误，欢迎批评与指正。如果我的内容能够对来访者有所帮助，那么我将非常开心。在这里，一起努力，共勉。（本文为置顶文章,更多内容请向下滑动或在分类与时间线内查看） 1234567#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;&quot;Hello World!&quot;; return 0;&#125;","categories":[],"tags":[]}],"categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"-单链表","slug":"单链表","permalink":"http://example.com/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"}]}